{
	"name": "df_dim_customer_scdtype1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CustomerSource",
						"type": "DatasetReference"
					},
					"name": "CustomerSource"
				},
				{
					"dataset": {
						"referenceName": "DimCustomer",
						"type": "DatasetReference"
					},
					"name": "dimcustomer"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DimCustomer",
						"type": "DatasetReference"
					},
					"name": "SinkTarget"
				}
			],
			"transformations": [
				{
					"name": "CreateHashKey"
				},
				{
					"name": "Exist"
				},
				{
					"name": "LookupCustomerid"
				},
				{
					"name": "SetDates"
				},
				{
					"name": "Upsert"
				},
				{
					"name": "surrogateKey1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as integer,",
				"          Title as string,",
				"          FirstName as string,",
				"          MiddleName as string,",
				"          LastName as string,",
				"          Suffix as string,",
				"          CompanyName as string,",
				"          SalesPerson as string,",
				"          EmailAddress as string,",
				"          Phone as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> CustomerSource",
				"source(output(",
				"          CustomerID as integer,",
				"          Title as string,",
				"          FirstName as string,",
				"          MiddleName as string,",
				"          LastName as string,",
				"          Suffix as string,",
				"          CompanyName as string,",
				"          SalesPerson as string,",
				"          EmailAddress as string,",
				"          Phone as string,",
				"          InsertedDate as timestamp,",
				"          ModifiedDate as timestamp,",
				"          HashKey as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> dimcustomer",
				"CustomerSource derive(Hashkey = sha1(256,iifNull(Title,'')+iifNull(FirstName,'')+iifNull(LastName,'')+iifNull(Suffix,'') +iifNull(CompanyName,'') +iifNull(SalesPerson,'') +iifNull(EmailAddress,'') +iifNull(Phone,''))) ~> CreateHashKey",
				"CreateHashKey, dimcustomer exists(CreateHashKey@Hashkey == dimcustomer@HashKey,",
				"     negate:true,",
				"     broadcast: 'auto')~> Exist",
				"Exist, dimcustomer lookup(CustomerSource@CustomerID == dimcustomer@CustomerID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupCustomerid",
				"surrogateKey1 derive(InsertedDate = iif(isNull(InsertedDate),currentTimestamp(), InsertedDate),",
				"          ModifiedDate = currentTimestamp()) ~> SetDates",
				"SetDates alterRow(insertIf(true())) ~> Upsert",
				"LookupCustomerid keyGenerate(output(CustomerId as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"Upsert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CustomerID as integer,",
				"          Title as string,",
				"          FirstName as string,",
				"          MiddleName as string,",
				"          LastName as string,",
				"          Suffix as string,",
				"          CompanyName as string,",
				"          SalesPerson as string,",
				"          EmailAddress as string,",
				"          Phone as string,",
				"          InsertedDate as timestamp,",
				"          ModifiedDate as timestamp,",
				"          HashKey as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['CustomerID'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          CustomerID = CustomerSource@CustomerID,",
				"          Title = CustomerSource@Title,",
				"          FirstName = CustomerSource@FirstName,",
				"          MiddleName = CustomerSource@MiddleName,",
				"          LastName = CustomerSource@LastName,",
				"          Suffix = CustomerSource@Suffix,",
				"          CompanyName = CustomerSource@CompanyName,",
				"          SalesPerson = CustomerSource@SalesPerson,",
				"          EmailAddress = CustomerSource@EmailAddress,",
				"          Phone = CustomerSource@Phone,",
				"          InsertedDate,",
				"          ModifiedDate,",
				"          HashKey = CreateHashKey@Hashkey",
				"     )) ~> SinkTarget"
			]
		}
	}
}